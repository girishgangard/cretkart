{"name": "test_CredKart_Login_params_003[getDataforLogin2]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testCases.test_Login_params.Test_CredKart_Login_params object at 0x0000021DD44094D0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cd0d827e7fc521df5a6be218dc4d8a4a\")>\ngetDataforLogin = ('Credencetest@test.com', 'Credence@1231')\n\n>   ???\n\nD:\\Credence Class Notes\\CredenceBatches\\CredenceBatch#14 & 15\\CredKart_Pytest_Project - Copy\\testCases\\test_Login_params.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021DD43F7910>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF7255638E3]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEE1587614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFEE2A226B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//h2[normalize-space()='CredKart']\"}\nE         (Session info: chrome=115.0.5790.110); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF7255F3E62+57250]\nE       \t(No symbol) [0x00007FF72556BC02]\nE       \t(No symbol) [0x00007FF72543E0BB]\nE       \t(No symbol) [0x00007FF72547765E]\nE       \t(No symbol) [0x00007FF72547774C]\nE       \t(No symbol) [0x00007FF7254B0267]\nE       \t(No symbol) [0x00007FF7254967EF]\nE       \t(No symbol) [0x00007FF7254AE312]\nE       \t(No symbol) [0x00007FF725496583]\nE       \t(No symbol) [0x00007FF72546CC71]\nE       \t(No symbol) [0x00007FF72546DE54]\nE       \tGetHandleVerifier [0x00007FF7258A4CF2+2879026]\nE       \tGetHandleVerifier [0x00007FF7258F6F30+3215472]\nE       \tGetHandleVerifier [0x00007FF7258EFD4F+3186319]\nE       \tGetHandleVerifier [0x00007FF725685505+652869]\nE       \t(No symbol) [0x00007FF725577518]\nE       \t(No symbol) [0x00007FF7255735F4]\nE       \t(No symbol) [0x00007FF7255736EC]\nE       \t(No symbol) [0x00007FF7255638E3]\nE       \tBaseThreadInitThunk [0x00007FFEE1587614+20]\nE       \tRtlUserThreadStart [0x00007FFEE2A226B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCases.test_Login_params.Test_CredKart_Login_params object at 0x0000021DD44094D0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cd0d827e7fc521df5a6be218dc4d8a4a\")>\ngetDataforLogin = ('Credencetest@test.com', 'Credence@1231')\n\n>   ???\nE   assert False\n\nD:\\Credence Class Notes\\CredenceBatches\\CredenceBatch#14 & 15\\CredKart_Pytest_Project - Copy\\testCases\\test_Login_params.py:23: AssertionError"}, "attachments": [{"name": "stdout", "source": "0b5b5161-7ff8-4dd1-b37e-724469722e33-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "getDataforLogin", "value": "('Credencetest@test.com', 'Credence@1231')"}], "start": 1690994922380, "stop": 1690994924704, "uuid": "d3278e8a-2468-400d-8418-4ee88853821a", "historyId": "3f9bddc9339c8b55ac259f62710fc71f", "testCaseId": "8f080cd1488f918ea68530d39de5f40e", "fullName": "testCases.test_Login_params.Test_CredKart_Login_params#test_CredKart_Login_params_003", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_Login_params"}, {"name": "subSuite", "value": "Test_CredKart_Login_params"}, {"name": "host", "value": "DESKTOP-PS67T7L"}, {"name": "thread", "value": "125180-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_Login_params"}]}